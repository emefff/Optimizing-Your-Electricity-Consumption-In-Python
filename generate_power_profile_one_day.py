# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import matplotlib.pyplot as plt
import numpy as np
import tqdm
import copy

# we set the font size for plt to a larger value, looks more scientific in the plots lol
plt.rcParams.update({'font.size': 22})

def create_time(hour, minute):
    error = False
    if minute>59 or minute<0:
        print("[ERROR] Minute must be within 0-59")
        error = True
    if minute == 0:
        minute = "00"
    if minute == 1:
        minute = "01"
    if minute == 2:
        minute = "02"
    if minute == 3:
        minute = "03"
    if minute == 4:
        minute = "04"
    if minute == 5:
        minute = "05"
    if minute == 6:
        minute = "06"
    if minute == 7:
        minute = "07"
    if minute == 8:
        minute = "08"
    if minute == 9:
        minute = "09"
    if hour == 0:
        hour = "00"
    if hour == 1:
        hour = "01"
    if hour == 2:
        hour = "02"
    if hour == 3:
        hour = "03"
    if hour == 4:
        hour = "04"
    if hour == 5:
        hour = "05"
    if hour == 6:
        hour = "06"
    if hour == 7:
        hour = "07"
    if hour == 8:
        hour = "08"
    if hour == 9:
        hour = "09"
    if not error == True:
        return str(hour)+":"+str(minute)
    else:
        return None


def inject_power_value(time, device, randomization_percentage):
    active = is_active(time, device)
    # print("*******")
    # print(time, active)
    # print("#######")
    time_device_start = device[0]
    time_device_end = device[1]
    
    time_device_start_hour = int(time_device_start.partition(":")[0])
    time_device_end_hour = int(time_device_end.partition(":")[0])
    
    time_device_start_minute = int(time_device_start.partition(":")[2])
    time_device_end_minute = int(time_device_end.partition(":")[2])
        
    time_actual_hour = int(time.partition(":")[0])
    time_actual_minute = int(time.partition(":")[2])
    
    device_profile = device[2]
    length_device_profile = len(device[2])
    
    # we need absolute and relative time in profile to know 'when' we are in the profile
    counter_time_absolute = time_actual_hour*60 + time_actual_minute
    counter_hour_in_profile = time_actual_hour - time_device_start_hour
    counter_minute_in_profile = time_actual_minute - time_device_start_minute
    counter_time_in_profile = counter_hour_in_profile * 60 + counter_minute_in_profile
 
    if active == True:
        # we need a warning (at least) if the profile is too short for some reason, it's useless there will be an index error before that
        if length_device_profile < counter_time_in_profile:
            print("[WARNING] The entered device profile is too short.... power values will not be correct")
        # print("*****")
        # print(counter_time_in_profile)
        # print("*****\n")
        current_total_power = total_power_curve_per_day[counter_time_absolute]
        device_power = device_profile[counter_time_in_profile]
        current_total_power_new = current_total_power + device_power*float(1 + np.random.randn() * randomization_percentage/100)
        total_power_curve_per_day[counter_time_absolute] = current_total_power_new
        # print("****************")
        # print(time, device_power, current_total_power_new, total_power_curve_per_day[counter_time_absolute])


def is_active(time, device):
    time_device_start = device[0]
    time_device_end = device[1]
    
    time_device_start_hour = time_device_start.partition(":")[0]
    time_device_end_hour = time_device_end.partition(":")[0]
    
    time_device_start_minute = time_device_start.partition(":")[2]
    time_device_end_minute = time_device_end.partition(":")[2]
    
    time_actual_hour = time.partition(":")[0]
    time_actual_minute = time.partition(":")[2]
       
    # print(time_actual_hour, time_actual_minute)
    # print(time_device_start_hour, time_device_start_minute,"---", time_device_end_hour, time_device_end_minute)
    
    active = False
    if time_actual_hour == time_device_start_hour:
        if time_actual_minute >= time_device_start_minute: # start_minute is inclusive
            active = True
    if time_actual_hour > time_device_start_hour and time_actual_hour <= time_device_end_hour: # end_minute should also be exclusive, otherwise we
        active = True                                                                          # miss the last value
    if time_actual_hour == time_device_end_hour:
        if time_actual_minute < time_device_end_minute:
            active = True
    else:
        pass        
    return active


def total_energy_consumed_per_day(total_power_consumption_per_min): # negative energy is LOST!
    total_power_consumption_temp = copy.deepcopy(total_power_consumption_per_min) # without deepcopy, total power curve will also be capped at 0W
    for i,power in enumerate(total_power_consumption_temp):                       # a classic Python beginner mistake :-(Â´
        if power <=0:
            power = 0
            #print(i, power)
        total_power_consumption_temp[i] = power
    sum_energy_per_day_kWh = sum(total_power_consumption_temp)/60/1000 # unit kWh
    #print(sum_energy_per_day_kWh,"kWh")
    return sum_energy_per_day_kWh

###############################################################################
###############################################################################

total_power_curve_per_day = [0 for i in range(1440)] # create empty total power profile

day = []
for hour in range(0,24):
    for minute in range(0,59+1):
        time = create_time(hour, minute)
        day.append(time)
        
#print(day)
    
#################### POWER PROFILES FOR HOME APPLIANCES #######################
# They are defined on a 'per minute'-basis in W, first value is for the first minute,
# second value is for the second minute and so on. Almost all of them are longer than needed,
# some are even defined for 24h, especially the 'always-on'-appliances like the fridge.
# As a user, you'd have to create your own profiles, of course. The power curves
# of your own devices will rarely match the profiles below. 


# let's generate a profile for a VBM coffemaker (yes, it is derived from a real 
# profile). It has some sharp peaks with 1350 or so W for ~30s, and as we have 
# a 1 minute interval we have to average over one minute
# The coffee-addict prepares one coffee per hour (approx.). When this happens, 
# power is high for one minute (1409.2), the machine must reheat the fresh 
# and cold water, the 1341/2 values are just for keeping the machine warm)
# when a coffee is prepared the values are [1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2] instead of
# [1341/2, 0, 0, 0, 0, 0, 0]
coffemaker_profile_1 = [1366.8, 1354.4, 1349.2, 1349.2, 0, 0, 1348.5/2, 0, 0, 1356.5/2, 
                      0, 0, 0, 1350/2, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2, 0,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2, 0,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2, 0,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2, 0,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2, 0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2, 0,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1409.2, 0, 0, 0, 1398.5/2, 0, 1340/2,0,0, 0, 0, 0, 0, 0, 1341/2]
# print(len(coffemaker_profile_1)/60) # profile is 9.85 hours long which should always be sufficient

# below profile is for the coffemaker when nobody drinks a coffee (it is switched 
# on and forgotten, it happens). It is therefore a 'total-waste-of-energy'-profile.
coffemaker_profile_2 = [1366.8, 1354.4, 1349.2, 1349.2, 0, 0, 1348.5/2, 0, 0, 1356.5/2, 
                      0, 0, 0, 1350/2, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2, 0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,
                      0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2,0, 0, 0, 0, 0, 0, 1341/2]

# profile of AEG protex 6kg with 'wash-and-wear' (Pflegeleicht) program 40Â°C 1000RPMs Tambient = 23Â°C
# scanned via AVM Fritzdect so we only have 2min intervals
# profile is 4h long, nearly half of it is just stand-by
washing_machine_profile_1 = [32.5, 52.48, 77.58, 23.61, 12.75, 120.66, 120.66, 
                             123.31, 123.31, 83.74, 83.74, 176.3, 111.04, 111.04,
                             1956.16, 1956.16, 1848.67, 1848.67, 1947.51, 1947.51,
                             1869.18, 1869.18, 1901.9, 1901.9, 1916.37, 1916.37,
                             47.84, 47.84, 131.97, 131.97, 26.24, 26.24, 80.58,
                             80.58, 150.69, 150.69, 96.44, 96.44, 167.94, 167.94,
                             1899.67, 1899.67, 149.18, 149.18, 154.4, 154.4, 136.62,
                             136.62, 162.41, 162.41, 101.52, 101.52, 84.82, 84.82,
                             61.06, 61.06, 134.98, 134.98, 1859.75, 1859.75, 31.97,
                             31.97, 166.78, 166.78, 22.92, 22.92, 162.97, 162.97,
                             32.17, 32.17, 156.46, 156.46, 42.7, 42.7, 149.36, 149.36,
                             68.8, 68.8, 156.55, 156.55, 112.74, 112.74, 38.0, 38.0, 
                             160.42, 160.42, 33.54, 33.54, 113.22, 113.22, 109.02, 
                             109.02, 99.07, 99.07, 191.07, 191.07, 46.85, 46.85, 
                             95.5, 95.5, 148.43, 148.43, 34.58, 34.58, 127.52, 127.52,
                             45.4, 45.4, 172.47, 172.47, 140.99, 140.99, 61.34, 61.34, 
                             45.92, 45.92, 142.87, 142.87, 196.5, 196.5, 163.21, 163.21,
                             156.58, 156.58, 15.58, 15.58, 60.47, 60.47, 46.19, 46.19, 
                             63.11, 63.11,  63.11, 63.11, 0.95, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,
                             0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32, 0.32,0.32,0.32,0.32,]
# print(len(washing_machine_profile_1)/60) 

# power profile of Siemens dish-washer in ECO mode Tambient = 23Â°C
# profile is 6.3h long, nearly half of it is just stand-by
dish_washer_profile_1 = [0.24, 20.22, 9.82, 9.82, 26.53, 40.52, 27.68, 23.01, 23.17,
                         23.17, 23.98, 23.04, 17.01, 27.56, 23.11, 23.01, 
                         2298.69, 2286.12, 2320.03, 2307.46, 2284.75, 2220.76, 
                         2267.12, 2267.12, 21.28, 21.28, 66.21, 66.21, 66.21, 66.21,
                         38.96, 38.96, 66.66, 66.66, 41.35, 41.35, 67.1, 67.1,
                         31.66, 31.66, 67.4, 67.4, 21.81, 21.81, 67.4, 67.4,
                         26.5, 26.5, 67.61, 67.61, 2215.09, 2215.09, 68.08, 68.08,
                         68.05, 68.05, 21.95, 21.95, 68.08, 68.08, 21.9, 21.9,
                         67.96, 67.96, 42.29, 42.29, 67.91, 67.91, 42.23, 42.23,
                         35.27, 35.27, 67.96, 67.96, 21.84, 21.84, 67.77, 67.77,
                         24.71, 24.71, 67.79, 67.79, 42.36, 42.36, 67.48, 67.48, 
                         41.14, 41.14, 21.82, 21.82, 67.57, 67.57, 21.79, 21.79,
                         67.44, 67.44, 39.35, 39.35, 67.05, 67.05, 42.35, 42.35,
                         67.61, 67.61, 47.02, 47.02, 21.87, 21.87, 67.32, 67.32,
                         21.79, 21.79, 28.9, 28.9, 14.92, 14.92, 24.02, 24.02,
                         29.14, 29.14, 46.5, 46.5, 46.5, 46.5, 29.1, 29.1, 
                         46.52, 46.52, 45.31, 45.31, 16.3, 16.3, 19.29, 19.29,
                         2176.09, 2176.09, 2154.55, 2154.55, 2183.82, 2183.82,
                         2141.92, 2141.92, 2132.2, 2132.2, 2111.55, 2111.55,
                         2094.62, 2094.62, 2.89, 2.80, 2.87, 2.78, 2.79, 
                         2.89, 2.80, 2.87, 2.78, 2.79, 2.84, 2.84, 2.85, 
                         2.89, 2.80, 2.87, 2.78, 2.79, 2.89, 2.80, 2.87, 
                         2.78, 2.79, 2.84, 2.84, 2.85, 2.89, 2.80, 2.87, 
                         2.78, 2.79, 2.89, 2.80, 2.87, 2.78, 2.79, 2.84, 
                         2.84, 2.85, 2.89, 2.80, 2.87, 2.78, 2.79, 2.89, 
                         2.80, 2.87, 2.78, 2.79, 2.84, 2.84, 2.85, 2.37, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 
                         0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09]
#print(len(dish_washer_profile_1)/60)

refrigerator_profile_1 =  [35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           35.31, 34.77, 34.36, 33.55, 35.31, 33.14, 37.58, 
                           33.33, 35.47, 30.47, 31.97, 33.41, 32.5, 31.72, 
                           34.87, 35.61, 31.85, 31.95, 0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
#print("*",len(refrigerator_profile_1))

# created from Home Assistant Profile 20.03.2024, this 600W solar array is shadowed
# in the afternoon. This is less than ideal, but what can you do?
solar_power_profile_very_good_day_spring = [-0.27999999999999997, -2.67, -5.386,
        -8.975999999999999, -12.65, -16.22, -17.26, -17.674, -18.72, -18.84, 
        -19.592, -20.16, -20.396000000000004, -21.576, -21.754, -23.016, 
        -24.54, -25.968, -26.589999999999996, -27.512, -28.366000000000003, 
        -28.944, -30.35, -30.660000000000004, -31.73, -32.176, -33.09, 
        -33.303999999999995, -34.494, -34.879999999999995, -35.912, -36.174, 
        -38.684, -39.098, -40.730000000000004, -41.63, -43.496, 
        -43.940000000000005, -43.934, -45.308, -45.682, -47.474000000000004, 
        -47.702, -48.91199999999999, -50.242, -51.564, -52.36, -55.27, 
        -56.45399999999999, -59.279999999999994, -59.916, -63.041999999999994, 
        -64.218, -67.518, -68.53399999999999, -70.26599999999999, -71.374, 
        -73.02799999999999, -74.742, -75.75, -77.678, -78.434, -80.846, 
        -81.554, -86.65, -88.62800000000001, -91.468, -93.304, 
        -95.27000000000001, -96.448, -99.22, -100.398, -105.31400000000001, 
        -106.60400000000001, -107.8, -109.114, -110.03200000000001, 
        -111.13600000000001, -111.66999999999999, -112.51999999999998, 
        -113.974, -117.42999999999999, -118.064, -141.472, -170.93800000000002, 
        -194.28199999999998, -195.282, -200.62, -201.72400000000002, 
        -203.032, -204.38600000000002, -205.86599999999999, -208.164, 
        -210.76999999999998, -212.51, -218.87800000000001, 
        -226.55599999999998, -247.51799999999997, -278.394, -299.802, 
        -303.32, -305.632, -306.43199999999996, -306.762, -307.692, 
        -308.054, -308.94, -311.35200000000003, -313.932, -313.002, 
        -312.464, -315.348, -320.764, -354.72400000000005, 
        -396.11600000000004, -411.6, -413.27200000000005, -416.062, 
        -418.8860000000001, -420.302, -423.59, -426.172, -426.058, 
        -430.57399999999996, -433.70799999999997, -438.35200000000003, 
        -445.67600000000004, -449.73799999999994, -456.846, -463.918, 
        -486.422, -513.042, -539.906, -547.3, -551.4799999999999, 
        -556.6959999999999, -558.24, -561.5380000000001, -562.0160000000001, 
        -562.854, -564.628, -568.528, -568.314, -568.9480000000001, 
        -569.7720000000002, -573.014, -574.32, -574.198, -578.1500000000001, 
        -579.0899999999999, -582.2760000000001, -580.86, -583.734, 
        -586.238, -585.568, -583.01, -586.184, -587.304, -589.5319999999999, 
        -593.65, -593.744, -577.47, -580.3960000000001, -589.3620000000001, 
        -586.138, -578.4860000000001, -579.134, -586.2239999999999, -588.66, 
        -593.272, -596.4460000000001, -599.8140000000001, -600.008, -601.614,
        -604.118, -603.544, -605.6339999999999, -606.304, -607.1360000000001, 
        -609.0640000000001, -610.0200000000001, -612.878, -615.012, -616.412, 
        -617.278, -617.676, -614.3480000000001, -614.572, -615.2760000000001, 
        -613.892, -613.124, -614.0319999999999, -614.576, -616.53, 
        -616.6880000000001, -614.362, -612.888, -615.414, -615.8320000000001, 
        -616.512, -617.808, -617.734, -616.894, -613.548, -613.088, -612.932, 
        -615.0580000000001, -613.198, -612.088, -610.746, -610.684, 
        -610.3779999999999, -609.766, -606.982, -607.29, -608.356, -608.276, 
        -608.082, -607.7819999999999, -607.6, -604.564, -603.756, 
        -603.4780000000001, -604.0400000000001, -606.25, -606.382, 
        -606.514, -605.666, -604.006, -603.984, -604.2379999999999, 
        -603.442, -602.666, -600.7499999999999, -599.358, -599.136, 
        -599.03, -597.622, -595.858, -589.4460000000001, -588.104, 
        -586.3459999999999, -585.644, -585.812, -584.854, -583.832, 
        -584.424, -584.5960000000001, -583.99, -583.694, -583.244, 
        -582.5360000000001, -581.1719999999999, -579.514, -576.3019999999999,
        -575.486, -578.432, -581.0519999999999, -582.106, -568.476, -542.698, 
        -510.066, -484.3280000000001, -471.22800000000007, -465.93199999999996,
        -462.066, -460.916, -459.48, -456.93999999999994, -456.72800000000007, 
        -456.032, -456.84400000000005, -457.73400000000004, -457.254, 
        -456.63199999999995, -452.33600000000007, -451.242, -447.3179999999999, 
        -446.454, -438.7, -401.366, -355.95599999999996, -336.742, 
        -335.10200000000003, -335.368, -334.038, -332.996, -330.622, 
        -330.54800000000006, -331.706, -332.088, -332.04, -331.662, 
        -328.09000000000003, -327.584, -327.882, -326.65400000000005,
        -325.592, -325.284, -319.44, -289.432, -241.62199999999999, -229.234,
        -223.86999999999998, -217.82399999999998, -215.81199999999998, -216.956,
        -216.772, -215.17000000000002, -215.97400000000002, -215.72600000000003, 
        -215.416, -214.16799999999998, -213.702, -212.43599999999998, 
        -211.38199999999998, -186.83, -156.67799999999997, -121.276, -114.748, 
        -105.022, -104.404, -103.80799999999999, -102.28400000000002, -102.644,
        -100.724, -100.04400000000001, -99.03599999999999, -99.056, -99.31, 
        -96.498, -96.538, -96.838, -95.88400000000001, -96.81800000000001, 
        -96.008, -95.48400000000001, -95.13, -94.64399999999999, -94.354, 
        -94.24000000000001, -92.85, -92.822, -92.66, -92.46, -92.352, -91.21,
        -91.424, -90.786, -90.80199999999999, -89.072, -88.94399999999999, 
        -88.142, -87.712, -88.50399999999999, -88.89200000000001, -87.72800000000001,
        -87.16600000000001, -86.428, -86.536, -88.808, -88.72399999999999, -88.38,
        -88.01400000000001, -87.588, -86.96799999999999, -87.10799999999999, 
        -86.6, -86.06200000000001, -84.92800000000001, -84.402, -84.41, -84.158,
        -84.05799999999999, -83.718, -83.196, -81.908, -79.984, -82.452, 
        -81.514, -81.832, -81.122, -80.672, -80.148, -78.41, -79.338, -79.53800000000001, 
        -78.984, -78.676, -78.004, -77.67399999999999, -76.354, -77.06800000000001,
        -76.776, -76.78200000000001, -76.502, -76.182, -75.064, -74.664, 
        -74.64399999999999, -74.83599999999998, -74.70599999999999, -74.47200000000001,
        -73.78600000000002, -73.16, -72.618, -72.528, -71.818, -71.34, -71.032,
        -70.888, -70.2, -69.952, -68.986, -61.79600000000001, -55.684000000000005,
        -59.648, -64.95599999999999, -62.27399999999999, -62.33399999999999, 
        -63.098, -63.040000000000006, -62.254, -62.05999999999999, -62.234, 
        -61.24399999999999, -60.855999999999995, -59.738, -59.524, -58.916, 
        -58.55800000000001, -58.04, -58.104, -56.628, -55.294000000000004, 
        -53.739999999999995, -51.998000000000005, -50.08, -49.268, -48.616, 
        -48.624, -48.370000000000005, -47.392, -47.25, -47.233999999999995, 
        -46.95, -46.940000000000005, -46.098, -45.874, -45.204, -44.944, 
        -44.53, -43.97, -43.666, -43.582, -43.41199999999999, -42.784, -42.556, 
        -42.314, -42.054, -41.739999999999995, -41.510000000000005, -41.326, 
        -40.094, -40.214, -39.886, -39.576, -39.85, -39.63, -39.596000000000004,
        -39.346000000000004, -39.465999999999994, -39.07, -38.856, 
        -38.446000000000005, -37.546, -37.61, -36.774, -36.236000000000004, 
        -35.67999999999999, -35.534000000000006, -34.898, -34.529999999999994,
        -34.374, -33.986000000000004, -33.339999999999996, -32.55799999999999, 
        -32.602, -32.53, -32.176, -31.722, -31.086000000000002, -30.203999999999997,
        -29.177999999999997, -28.456, -27.796, -28.106, -28.130000000000003,
        -27.76, -27.6, -26.733999999999998, -26.23, -25.682, -25.631999999999998,
        -25.889999999999997, -26.008, -25.998, -25.96, -25.656000000000006, 
        -25.736, -25.485999999999997, -24.824, -24.288, -24.056, -23.786, 
        -23.472, -22.922, -22.8, -22.082, -21.748, -20.888, -21.169999999999998, 
        -21.288, -20.627999999999997, -20.252000000000002, -19.816, 
        -19.549999999999997, -18.464, -18.253999999999998, -17.686, 
        -17.836000000000002, -17.808, -17.508000000000003, -17.477999999999998,
        -17.576, -17.014, -16.67, -16.328, -15.584, -15.648, -15.701999999999998,
        -15.751999999999999, -15.628, -15.305999999999997, -15.024000000000001, 
        -14.822, -14.922, -14.656, -14.516, -14.219999999999999, 
        -14.180000000000001, -13.984, -13.972, -13.863999999999999, -13.434000000000001,
        -13.466, -13.712, -13.62, -13.447999999999999, -13.724, -13.557999999999998, 
        -13.474, -13.248000000000001, -13.024000000000001, -13.168000000000001, 
        -13.245999999999999, -13.374, -13.419999999999998, -13.116, -13.222, 
        -12.958000000000002, -12.863999999999999, -12.724, -12.28, -12.091999999999999,
        -11.523999999999997, -11.258, -10.883999999999999, -10.228, -9.84, -9.302,
        -8.879999999999999, -8.558000000000002, -8.065999999999999, -7.822, -7.522, 
        -6.792, -3.4300000000000006, -1.682, -1.1019999999999999, -0.25400000000000006,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
#print(len(solar_power_profile_very_good_day_spring)/60)
# not really perfect, we needed to interpolate a lot.


# let's define a slightly randomized 24h profile for all the internet stuff that 
# is always on
router_firewall_wifi_profile_low = [ 38.62 + float(3.15*np.random.randn()) for i in range(1440)]
#print(len(router_firewall_wifi_profile_low))

# let's define a power profile of a 55" screen + audio equipment, let's define it for one day, which is way too long
screen55_audio_equipment_profile = [ 133.88 + float(9.4*np.random.randn()) for i in range(1440)]

# let's define a power profile of one Aruba 1930 24G non POE
aruba_1930_24G_nonPOE_profile = [15.8 + float(0.12*np.random.randn()) for i in range(1440)] # this is a very constant device!


# let's define a power profile for our water boiler Austria Email EcoClever 80l
# this is a 'during the week' profile. Once a week, we will let it go to full power to
# kill Legionella adelaidensis, anisa, beliardensis, birminghamensis and whatnot.
# This is, of course, already an optimized profile over one week.
austria_email_ecoclever_80l_low_1 = [2109.5, 2092.2, 2094.1, 2104.7, 2107, 2108.9, 
                                 2106.5, 2101.2, 2108.7, 2093.5, 2098.7, 2101.5,
                                 2117.0, 2118.1, 2114.8, 2108.0, 2106.8, 2118.0, 
                                 2121.9, 2120.9, 2110.1, 2113.6, 2109.8, 2108.3,
                                 2120.6, 2118.9, 2119.0, 2123.7, 2116.2, 2123.9,
                                 2115.6, 2114.3, 2127.2, 2121.6, 2132.0, 2130.9, 
                                 2138.6, 2145.1, 2092.0, 2065.7, 0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

###############################################################################
##### GENERATE A TYPICAL POWER PROFILE FOR A SUNNY DAY AND LOTS OF DEVICES ####
###############################################################################

# we switch on some appliances   
# the lists below contain [start_time, end_time, power_profile]     
# as of now, end_time must be within the power_profile, otherwise we will run
# into a index_error in the power_profile
coffemaker_1 = ["07:00", "09:00", coffemaker_profile_1]
coffemaker_2 = ["12:03", "13:30", coffemaker_profile_2]   
washing_machine = ["14:30", "17:30", washing_machine_profile_1]
dish_washer = ["13:20", "16:20", dish_washer_profile_1]
router_firewall_wifi = ["00:00", "23:59", router_firewall_wifi_profile_low] # needs the inclusive upper boundary in is_active
screen55_audio_1 = ["18:00", "22:30", screen55_audio_equipment_profile]
screen55_audio_2 = ["07:00", "07:30", screen55_audio_equipment_profile]
aruba_1930_1 = ["08:00", "16:00", aruba_1930_24G_nonPOE_profile]
aruba_1930_2 = ["08:00", "16:05", aruba_1930_24G_nonPOE_profile]
solar_very_good_1 = ["06:30", "16:30", solar_power_profile_very_good_day_spring]
refrigerator_spring_1 = ["00:00", "23:59", refrigerator_profile_1]
water_boiler_low_1 = ["01:00", "02:00", austria_email_ecoclever_80l_low_1]

print("Calculating a typical power profile...")
# let's build a power profile for one typical weekday in HO
# we do this by injecting power values from a profile
# in inject_power_value we also can add some randomness to the power_value
# the order of the appliances does not matter
for i,time in enumerate(day): # enumerate(day[200:400]) for only a portion of a day
    inject_power_value(time, coffemaker_1, 0.5)
    inject_power_value(time, coffemaker_2, 0.5)
    inject_power_value(time, washing_machine, 0.5)
    inject_power_value(time, dish_washer, 0.5)
    inject_power_value(time, router_firewall_wifi, 0) # this one is already slightly randomized ...hehehe
    inject_power_value(time, screen55_audio_1, 0) # also already randomized
    inject_power_value(time, screen55_audio_2, 0) # also already randomized
    inject_power_value(time, aruba_1930_1, 0) # also already randomized
    inject_power_value(time, aruba_1930_2, 0) # also already randomized
    inject_power_value(time, solar_very_good_1, 0.5)
    inject_power_value(time, refrigerator_spring_1, 0.5)
    inject_power_value(time, water_boiler_low_1, 0.5)


# let's sum up the power values over one day
# rather than a true integration, a sum is sufficient as we have discrete values 
# per minute (1440 values per day)
total_energy_consumed_day = total_energy_consumed_per_day(total_power_curve_per_day)
print(f"Energy consumed w/o optimization = {total_energy_consumed_day:.3f} kWh")

day_minutes = [i for i in range(1440)]

# let's plot the power curve of one day, remember we just switched on some stuff 
# more or less without thinking.
# The power curve also shows negative values from the solar array. For the calculation
# of the total consumed energy, these values are set to zero.
plt.figure(figsize=(15,9))    
plt.step(day_minutes, total_power_curve_per_day, 'k-')
plt.title(f"Total energy consumed = {total_energy_consumed_day:.3f} kWh")
plt.xlabel("time of day / minutes")
plt.ylabel("total power curve / W")
#plt.xlim([900,1100])
plt.axline([0,0], slope=0)
plt.tight_layout()
plt.show()

          
# what is something useful we can we actually do with these profiles?

###############################################################################
############ OPTIMIZING THE SWITCHING TIME OF THE LAUNDRY MACHINE #############
###############################################################################

# Anyone with a solar array knows, that if we switch on our stuff during solar
# production, we will benefit the most. But when exactly should we switch on our
# devices?
# Let us try optimize the usage of the laundry machine.
# When is the best time to switch it on during above day?
# We can brute-force and try all 1440 (actually less than that, because we still
# cannot overflow a power profile into the next day). This probably not the optimum
# solution (gradient descent would be less costly, for sure), but we have 
# plenty of computational power :-). 

total_power_curve_per_day = [0 for i in range(1440)] # create empty total power profile

# we are testing start times from 5:00 until 15:59 
hour_start = 5
hour_end = 16 # take care, because the end_time cannot overflow into the next day

minutes_list = []
energy_list = []

interval_minutes = 1 # check every x minutes

print("\nOptimizing the laundry machine......")
print("This optimization takes a while.....")
counter = 0
for hour in tqdm.tqdm(range(hour_start,hour_end+1)):
    hour_start_single_digit = False
    hour_end_single_digit = False
    if len(str(hour)) == 1:
        hour_start_single_digit = True
    if len(str(hour+3)) == 1:
        hour_end_single_digit = True
    for minute in range(0, 60, interval_minutes): # was (0,59+1)
        minute_single_digit = False
        if len(str(minute)) == 1:
            minute_single_digit = True
        
        total_power_curve_per_day = [0 for i in range(1440)] # create empty total power profile
        
        # we need to prevent single digit number having no leading zero
        if hour_start_single_digit == True and minute_single_digit == True:
            time = "0" + str(hour) + ":" + "0" + str(minute)
        elif hour_start_single_digit == True and minute_single_digit == False:
            time = "0" + str(hour) + ":" + str(minute)
        elif hour_start_single_digit == False and minute_single_digit == True:
            time = str(hour) + ":" + "0" + str(minute)    
        else:
            time = str(hour) + ":" + str(minute)
      
        # we need to prevent single digit number having no leading zero
        if hour_end_single_digit == True and minute_single_digit == True:
            time_plus_3h = "0" + str(hour+3) + ":" + "0" + str(minute)
        elif hour_end_single_digit == True and minute_single_digit == False:
            time_plus_3h = "0" + str(hour+3) + ":" + str(minute)
        elif hour_end_single_digit == False and minute_single_digit == True:
            time_plus_3h = str(hour+3) + ":" + "0" + str(minute)    
        else:
            time_plus_3h = str(hour+3) + ":" + str(minute)
            
        # we switch on some appliances        
        coffemaker_1 = ["07:00", "09:00", coffemaker_profile_1]
        coffemaker_2 = ["12:03", "13:30", coffemaker_profile_2]   
        washing_machine = [time, time_plus_3h, washing_machine_profile_1] # we just add 3 hours, that's ok, it's enough time for the profile
        dish_washer = ["11:20", "15:20", dish_washer_profile_1] 
        router_firewall_wifi = ["00:00", "23:59", router_firewall_wifi_profile_low] # needs the inclusive upper boundary in is_active
        screen55_audio_1 = ["18:00", "22:30", screen55_audio_equipment_profile]
        screen55_audio_2 = ["07:00", "07:30", screen55_audio_equipment_profile]
        aruba_1930_1 = ["08:00", "16:00", aruba_1930_24G_nonPOE_profile]
        aruba_1930_2 = ["08:00", "16:05", aruba_1930_24G_nonPOE_profile]
        solar_very_good_1 = ["06:30", "16:30", solar_power_profile_very_good_day_spring]
        refridgerator_spring_1 = ["00:00", "23:59", refrigerator_profile_1]
        water_boiler_low_1 = ["01:00", "02:00", austria_email_ecoclever_80l_low_1]


        # let's build a power profile for one typical weekday in HO
        for i,time in enumerate(day): # enumerate(day[200:400]) for only a portion of a day
            inject_power_value(time, coffemaker_1, 0.5)
            inject_power_value(time, coffemaker_2, 0.5)
            inject_power_value(time, washing_machine, 0.5)
            inject_power_value(time, dish_washer, 0.5)
            inject_power_value(time, router_firewall_wifi, 0) # this one is already slightly randomized ...hehehe
            inject_power_value(time, screen55_audio_1, 0) # also already randomized
            inject_power_value(time, screen55_audio_2, 0) # also already randomized
            inject_power_value(time, aruba_1930_1, 0) # also already randomized
            inject_power_value(time, aruba_1930_2, 0) # also already randomized
            inject_power_value(time, solar_very_good_1, 0.5)
            inject_power_value(time, refridgerator_spring_1, 0.5)
            inject_power_value(time, water_boiler_low_1, 0.5)


        # let's sum up the power values over one day
        total_energy_day = total_energy_consumed_per_day(total_power_curve_per_day)
        # print("**********", total_energy_day)
        minutes_list.append(hour*60+minute)
        energy_list.append(total_energy_day)
        
        day_minutes = [i for i in range(1440)]
        
         
        # we need a 4 digit image counter for ffmpeg starting from 0000 to 1440
        counter_str = str(counter)
        if len(counter_str) == 1:
            imagecounter = "000"+counter_str
        if len(counter_str) == 2:
            imagecounter = "00"+counter_str
        if len(counter_str) == 3:
            imagecounter = "0"+counter_str
        elif len(counter_str) == 4:
            imagecounter = counter_str
        #print(counter, counter_str, imagecounter)
        
        # let's plot the power curve of one day
        # UNCOMMENT IF YOU WANT TO GENERATE A LOT OF POWER CURVES
        # plt.figure(figsize=(15,9))    
        # plt.step(day_minutes, total_power_curve_per_day, 'k-')
        # plt.title(f"Total energy consumed = {total_energy_day:.3f} kWh, @{minutes_list[counter]} minutes")
        # plt.xlabel("time of day / minutes")
        # plt.ylabel("total power consumption / W")
        # #plt.xlim([900,1100])
        # plt.axline([0,0],slope=0)
        # plt.tight_layout()
        # #plt.savefig(f"Optimization_nr1_laundrymachine_minute_@{minutes_list[counter]}.png", dpi=600) # this would be wise, but ffmpeg cannot make a movie from it
        # plt.savefig("Optimization_nr1_laundrymachine_minute_@" + imagecounter + ".png", dpi=100) # low dpi needed for video
        # #plt.show()
        # plt.close() # we need that here, because we could get A LOT of figueres opened
        # counter = counter + 1
        
print(f"\nMaximum energy consumed = {max(energy_list):.3f} kWh, minimum energy used = {min(energy_list):.3f} kWh")  

plt.figure(figsize=(15,9))        
plt.plot(minutes_list, energy_list,'b-')
plt.title("Total energy consumed with variable laundry machine starting time")
plt.xlabel("time of day and time of laundry machine start / minutes")
plt.ylabel("total energy consumed / kWh")
plt.show()

print("From the curve in figure 2 we find an optimum of approx. 550 minutes")
print("Notice, there is a little wiggle room in the energy curve from 520-580 minutes,")
print("that is from 8:40 until 09:40. The next profile will be more constricted and sharper.")
# we can set the next profile for the WM like this, 550 minutes is 09:10 in the morning
washing_machine = ["09:10", "12:10", washing_machine_profile_1]


###############################################################################
############## OPTIMIZING THE SWITCHING TIME OF THE DISHWASHER ###############
###############################################################################

# now we will optimize further, we choose the dishwasher
# we are testing starting times from 5:00 until 15:59 
hour_start = 5
hour_end = 16 # take care, because the end_time cannot overflow into the next day

minutes_list = []
energy_list = []

#interval_minutes = 2 # check every x minutes
counter = 0
print("\nOptimizing the dishwasher......")
print("This optimization takes a while.....")
for hour in tqdm.tqdm(range(hour_start,hour_end+1)):
    hour_start_single_digit = False
    hour_end_single_digit = False
    if len(str(hour)) == 1:
        hour_start_single_digit = True
    if len(str(hour+4)) == 1:
        hour_end_single_digit = True
    for minute in range(0, 60, interval_minutes): # was (0,59+1)
        minute_single_digit = False
        if len(str(minute)) == 1:
            minute_single_digit = True
        
        total_power_curve_per_day = [0 for i in range(1440)] # create empty total power profile
        
        # we need to prevent single digit number having no leading zero
        if hour_start_single_digit == True and minute_single_digit == True:
            time = "0" + str(hour) + ":" + "0" + str(minute)
        elif hour_start_single_digit == True and minute_single_digit == False:
            time = "0" + str(hour) + ":" + str(minute)
        elif hour_start_single_digit == False and minute_single_digit == True:
            time = str(hour) + ":" + "0" + str(minute)    
        else:
            time = str(hour) + ":" + str(minute)
      
        # we need to prevent single digit number having no leading zero
        if hour_end_single_digit == True and minute_single_digit == True:
            time_plus_4h = "0" + str(hour+4) + ":" + "0" + str(minute)
        elif hour_end_single_digit == True and minute_single_digit == False:
            time_plus_4h = "0" + str(hour+4) + ":" + str(minute)
        elif hour_end_single_digit == False and minute_single_digit == True:
            time_plus_4h = str(hour+4) + ":" + "0" + str(minute)    
        else:
            time_plus_4h = str(hour+4) + ":" + str(minute)
            
        # we switch on some appliances        
        coffemaker_1 = ["07:00", "09:00", coffemaker_profile_1]
        coffemaker_2 = ["12:03", "13:30", coffemaker_profile_2]   
        
        washing_machine = ["09:10", "12:10", washing_machine_profile_1] # the optimum from the last step

        dish_washer = [time, time_plus_4h, dish_washer_profile_1] 

        router_firewall_wifi = ["00:00", "23:59", router_firewall_wifi_profile_low] # needs the inclusive upper boundary in is_active
        screen55_audio_1 = ["18:00", "22:30", screen55_audio_equipment_profile]
        screen55_audio_2 = ["07:00", "07:30", screen55_audio_equipment_profile]
        aruba_1930_1 = ["08:00", "16:00", aruba_1930_24G_nonPOE_profile]
        aruba_1930_2 = ["08:00", "16:05", aruba_1930_24G_nonPOE_profile]
        solar_very_good_1 = ["06:30", "16:30", solar_power_profile_very_good_day_spring]
        refrigerator_spring_1 = ["00:00", "23:59", refrigerator_profile_1]
        water_boiler_low_1 = ["01:00", "02:00", austria_email_ecoclever_80l_low_1]


        # let's build a power profile for one typical weekday in HO
        for i,time in enumerate(day): # enumerate(day[200:400]) for only a portion of a day
            inject_power_value(time, coffemaker_1, 0.5)
            inject_power_value(time, coffemaker_2, 0.5)
            inject_power_value(time, washing_machine, 0.5)
            inject_power_value(time, dish_washer, 0.5)
            inject_power_value(time, router_firewall_wifi, 0) # this one is already slightly randomized ...hehehe
            inject_power_value(time, screen55_audio_1, 0) # also already randomized
            inject_power_value(time, screen55_audio_2, 0) # also already randomized
            inject_power_value(time, aruba_1930_1, 0) # also already randomized
            inject_power_value(time, aruba_1930_2, 0) # also already randomized
            inject_power_value(time, solar_very_good_1, 0.5)
            inject_power_value(time, refrigerator_spring_1, 0.5)
            inject_power_value(time, water_boiler_low_1, 0.5)


        # let's sum up the power values over one day
        total_energy_day = total_energy_consumed_per_day(total_power_curve_per_day)
        # print("**********", total_energy_day)
        minutes_list.append(hour*60+minute)
        energy_list.append(total_energy_day)
        
        day_minutes = [i for i in range(1440)]
        
        # we need a 4 digit image counter for ffmpeg starting from 0000 to 1440
        counter_str = str(counter)
        if len(counter_str) == 1:
            imagecounter = "000"+counter_str
        if len(counter_str) == 2:
            imagecounter = "00"+counter_str
        if len(counter_str) == 3:
            imagecounter = "0"+counter_str
        elif len(counter_str) == 4:
            imagecounter = counter_str
        #print(counter, counter_str, imagecounter)
        
        # let's plot the power curve of one day
        # UNCOMMENT IF YOU WANT TO GENERATE A LOT OF POWER CURVES
        # plt.figure(figsize=(15,9))    
        # plt.step(day_minutes, total_power_curve_per_day, 'k-')
        # plt.title(f"Total energy consumed = {total_energy_day:.3f} kWh, @{minutes_list[counter]} minutes")
        # plt.xlabel("time of day / minutes")
        # plt.ylabel("total power consumption / W")
        # #plt.xlim([900,1100])
        # plt.axline([0,0],slope=0)
        # plt.tight_layout()
        # # plt.savefig(f"Optimization_nr2_dishwasher_minute_@{minutes_list[counter]}.png", dpi=600) # this would be wise, but ffmpeg cannot make a movie from it
        # plt.savefig("Optimization_nr2_dishwasher_minute_@" + imagecounter + ".png", dpi=100) # low dpi needed for video
        # #plt.show()
        # plt.close() # we need that here, because we could get A LOT of figueres opened
        # counter = counter + 1
        
print(f"\Maximum energy consumed = {max(energy_list):.3f} kWh, minimum energy used = {min(energy_list):.3f} kWh")  

plt.figure(figsize=(15,9))        
plt.plot(minutes_list, energy_list,'b-')
plt.title("Total energy consumed with variable dishwasher starting time")
plt.xlabel("time of day and time of dishwasher start / minutes")
plt.ylabel("total energy consumed / kWh")
plt.show()

print("From the curve in figure 5 we find an optimum of approx. 500 minutes (08:20")
print("The possible optimum interval shrunk to 490-510 minutes, that is 08:10-08:30")

print("Calculating an optimzed power profile...")
# we compute the optimum curve after the last step:
# we insert the optimum values from the last step, the rest remains the same like in the first power curve

total_power_curve_per_day = [0 for i in range(1440)] # create empty total power profile

coffemaker_1 = ["07:00", "09:00", coffemaker_profile_1]
coffemaker_2 = ["12:03", "13:30", coffemaker_profile_2]   
washing_machine = ["09:10", "12:10", washing_machine_profile_1] # the optimum from the first optimizing step
dish_washer = ["08:20", "12:20", dish_washer_profile_1] # the optimum from the last step
router_firewall_wifi = ["00:00", "23:59", router_firewall_wifi_profile_low] # needs the inclusive upper boundary in is_active
screen55_audio_1 = ["18:00", "22:30", screen55_audio_equipment_profile]
screen55_audio_2 = ["07:00", "07:30", screen55_audio_equipment_profile]
aruba_1930_1 = ["08:00", "16:00", aruba_1930_24G_nonPOE_profile]
aruba_1930_2 = ["08:00", "16:05", aruba_1930_24G_nonPOE_profile]
solar_very_good_1 = ["06:30", "16:30", solar_power_profile_very_good_day_spring]
refrigerator_spring_1 = ["00:00", "23:59", refrigerator_profile_1]
water_boiler_low_1 = ["01:00", "02:00", austria_email_ecoclever_80l_low_1]


# let's build a power profile for one typical weekday in HO
for i,time in enumerate(day): # enumerate(day[200:400]) for only a portion of a day
    inject_power_value(time, coffemaker_1, 0)
    inject_power_value(time, coffemaker_2, 0)
    inject_power_value(time, washing_machine, 0)
    inject_power_value(time, dish_washer, 0)
    inject_power_value(time, router_firewall_wifi, 0) # this one is already slightly randomized ...hehehe
    inject_power_value(time, screen55_audio_1, 0) # also already randomized
    inject_power_value(time, screen55_audio_2, 0) # also already randomized
    inject_power_value(time, aruba_1930_1, 0) # also already randomized
    inject_power_value(time, aruba_1930_2, 0) # also already randomized
    inject_power_value(time, solar_very_good_1, 0)
    inject_power_value(time, refrigerator_spring_1, 0)
    inject_power_value(time, water_boiler_low_1, 0.5)


# let's sum up the power values over one day
total_energy_consumed_day_opti = total_energy_consumed_per_day(total_power_curve_per_day)
print(f"\nWe approx. saved {total_energy_consumed_day-total_energy_consumed_day_opti:.3f} kWh of energy with optimizing the dishwasher and the laundry machine.")

# print("################")
# print(total_power_curve_per_day)
# print("################")

day_minutes = [i for i in range(1440)]

# let's plot the power curve of one day, remember we just switched on some stuff 
# more or less without thinking
plt.figure(figsize=(15,9))    
plt.step(day_minutes, total_power_curve_per_day, 'k-')
plt.title(f"Total energy consumed with optimised DW and WM = {total_energy_consumed_day_opti:.3f} kWh")
plt.xlabel("time of day / minutes")
plt.ylabel("total power curve / W")
#plt.xlim([900,1100])
plt.axline([0,0], slope=0)
plt.show()






    



